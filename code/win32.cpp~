#include<windows.h>

#define internal static 
#define local_persist static 
#define global_variable static

global_variable bool running; // static variable is initialised to 0 by default 
global_variable BITMAPINFO bitmapInfo;
global_variable void *bitmapMemory;
global_variable HBITMAP bitmapHandle;
global_variable HDC bitmapDeviceContext;

internal void win32ResizeDIBSection(int width, int height){
	if(bitmapHandle){
		DeleteObject(bitmapHandle); 
	}
	else{	
		bitmapDeviceContext =  CreateCompatibleDC(0);
	}
	bitmapInfo.bmiHeader.biSize= sizeof(bitmapInfo.bmiHeader);
	bitmapInfo.bmiHeader.biWidth = width;
	bitmapInfo.bmiHeader.biHeight = height;
	bitmapInfo.bmiHeader.biPlanes = 1;
	bitmapInfo.bmiHeader.biBitCount = 32;
	bitmapInfo.bmiHeader.biCompression = BI_RGB;
	
	bitmapHandle = CreateDIBSection(bitmapDeviceContext,&bitmapInfo,DIB_RGB_COLORS,&bitmapMemory,0,0);
	ReleaseDC(0, bitmapDeviceContext);
}

internal void win32UpdateWindow(HDC deviceContext,int x,int y, int width,int height){
	StretchDIBits(deviceContext,x,y,width,height,x,y,width,height,bitmapMemory,&bitmapInfo,DIB_RGB_COLORS,SRCCOPY);
}

LRESULT CALLBACK win32MainWindowCallback(HWND window, UINT message, WPARAM wParam, LPARAM lParam){
  LRESULT result=0;
  switch (message) {
    case WM_SIZE:{
	RECT clientRect;   
      	GetClientRect(window,&clientRect);
      	int height =  clientRect.right - clientRect.left;
      	int width  =  clientRect.bottom - clientRect.top;
	win32ResizeDIBSection(width,height);
	OutputDebugStringA("SIZE\n");
    } break;
    case WM_DESTROY:{
	running = false;
	OutputDebugStringA("DESTROY\n");
    } break;
    case WM_CLOSE:{
	running = false;
	OutputDebugStringA("CLOSE\n");
    } break;
    case WM_ACTIVATEAPP:{
      	OutputDebugStringA("ACTIVATE\n");
    } break;
    case WM_PAINT:{
	// we are using gdi ( a windows specific library)
	
     	PAINTSTRUCT paint;
     	HDC deviceContext = BeginPaint(window,&paint);
      	int X = paint.rcPaint.left;
      	int Y = paint.rcPaint.right;
      	int height = paint.rcPaint.bottom - paint.rcPaint.top;
      	int width  = paint.rcPaint.right - paint.rcPaint.left;
	win32UpdateWindow(deviceContext,X,Y,width,height);
	EndPaint(window,&paint);
    }
    default:{
    //  OutputDebugStringA("DEFAULT\n");
    	result = DefWindowProc(window,message,wParam,lParam);
    } break;
  }
  return result;
}

int CALLBACK WinMain(HINSTANCE instance,HINSTANCE prevInstance,LPSTR commandLine,int showCode){
	WNDCLASS WindowClass={};
   	WindowClass.style=CS_OWNDC|CS_HREDRAW|CS_VREDRAW;
   	WindowClass.lpfnWndProc=win32MainWindowCallback;
    	WindowClass.hInstance=instance;
    	//WindowClass.hIcon;
   	WindowClass.lpszClassName="blitz";
   	if(RegisterClass(&WindowClass)){
      		HWND windowHandle = CreateWindowEx( 0,
                                          WindowClass.lpszClassName,
                                          "Blitz",
                                          WS_OVERLAPPEDWINDOW|WS_VISIBLE,
                                          CW_USEDEFAULT,
                                          CW_USEDEFAULT,
                                          CW_USEDEFAULT,
                                          CW_USEDEFAULT,
                                          0,
                                          0,
                                          instance,
                                          0);
      		if(windowHandle){
        		MSG message;
			running = true;
        		while(running) {
         			BOOL messageResult = GetMessage(&message,0,0,0);
          			if(messageResult>0){
            				TranslateMessage(&message);
            				DispatchMessage(&message);
          			}
          			else{
            				break;
          			}
        		}
      		}
	      	else{	
	
      		}	
    	}
    	else{	

    	}		
	return 0;
}
